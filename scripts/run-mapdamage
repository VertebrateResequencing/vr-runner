#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{split_size} = 10e9;
    $$self{samtools}  = 'samtools';
    $$self{mapdamage} = 'mapDamage';

    $$self{config_version} = '1427807557';
    $$self{_sampleconf} = q[
            # For sanity checking that your config file is not obsolete. Update
            # the version key in your config file to get rid of the warnings.
            version  => '] .$$self{config_version}. q[',

            samtools  => '] .$$self{samtools}.  q[',
            mapdamage => '] .$$self{mapdamage}. q[',
            fa_ref    => undef,

            # 9GB file takes 11hrs to complete, split to regions if bigger
            split_size => ] .$$self{split_size}. q[,

            regions => [ qw(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X ancY) ],

            # Select files in the input directory on which the commands below 
            # will be executed. The files will be processed in parallel.
            glob => [qw(*.bam)],

    ]."\n";

    $$self{usage} .= 
        "About: Run mapDamage\n" .
        "Usage: run-mapdamage\n" .
        "Options:\n" .
        "   -i, --indir <dir>       Input directory\n" .
        "   -l, --list <file>       List of input file names\n" .
        "   -o, --outdir <dir>      Output directory\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-i' or $arg eq '--indir' ) { $$self{indir}=shift(@ARGV); next; }
        if ( $arg eq '-l' or $arg eq '--list' ) { $$self{inlist}=shift(@ARGV); next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        $self->throw();
    }
    if ( !exists($$self{fa_ref}) ) { $self->throw("Expected the fa_ref key."); }
    if ( !exists($$self{outdir}) ) { $self->throw("Expected the -o option."); }
    if ( !defined($$self{indir}) && !defined($$self{inlist}) ) { $self->throw("Expected the -i or -l option."); }
}

sub main
{
    my ($self) = @_;
    $self->parse_args();

    if ( $self->is_finished("$$self{outdir}/all_done") ) { $self->all_done; }

    my @files = $self->list_files();
    if ( !@files ) { $self->throw("No files to process?\n"); }
    `mkdir -p $$self{outdir}`;

    $self->chunk_files(@files);

    for my $file (@files)
    {
        for my $chunk (@{$$file{chunks}})
        {
            $self->spawn('mapdamage',$$chunk{outfile},$$chunk{infile},$$chunk{tmpdir});
        }
    }
    $self->wait;

    $self->merge_chunks(@files);

    #for my $file (@files) { $self->cmd("rm -rf $$file{tmpdir}"); }
    $self->create_io_map(\@files);
    $self->cmd("touch $$self{outdir}/all_done");

    $self->all_done;
}

sub create_io_map
{
    my ($self,$files) = @_;
    if ( !defined $$self{io_map} ) { return; }
    for my $map (sort keys %{$$self{io_map}})
    {
        my $map_name = $self->expand_vars($map,%$self);
        open(my $fh,'>',$map_name) or $self->throw("$map_name: $!");
        for my $file (@$files)
        {
            my $line = $self->expand_vars($$self{io_map}{$map},%$file);
            print $fh $line."\n";
        }
        close($fh) or $self->throw("close failed: $map_name");
    }
}

sub unique_name
{
    my ($self,$names,$file) = @_;
    my $new_name = $file;
    $new_name =~ s{^.*/}{};     # strip directory
    my $idx = 1;
    while ( exists($$names{$new_name}) )
    {
        $new_name = $file .'_'. $idx;
        $idx++;
    }
    $$names{$new_name} = 1;
    return $new_name;
}

sub list_files
{
    my ($self,$glob) = @_;
    my %names = ();
    my @files = ();
    if ( defined($$self{inlist}) )
    {
        open(my $fh,'<',$$self{inlist}) or $self->throw("$$self{inlist}: $!");
        while (my $file=<$fh>)
        {
            if ( $file=~/^\s*$/ ) { next; }
            if ( $file=~/^#/ ) { next; }
            $file =~ s/^\s*//;
            $file =~ s/\s*$//;
            chomp($file);
            my $dir = '.';
            if ( $file=~m{^(.+)/} ) { $dir = $1; $file = $'; }
            my $name = $self->unique_name(\%names,$file);
            push @files, {infile=>"$dir/$file",outfile=>"$$self{outdir}/$name",tmpdir=>"$$self{outdir}/tmp.$name"};
        }
        close($fh) or $self->throw("$$self{inlist}: $!");
        return @files;
    }
    if ( !-d $$self{indir} && -e $$self{indir} )
    {
        my $file = $$self{indir};
        my $dir = '.';
        if ( $file=~m{^(.+)/} ) { $dir = $1; $file = $'; }
        my $name = $file;
        return ({infile=>"$dir/$file",outfile=>"$$self{outdir}/$name",tmpdir=>"$$self{outdir}/tmp.$name"});
    }
    if ( !defined($$self{glob}) ) { $self->throw("Missing the 'glob' config key."); }
    for my $expr (@{$$self{glob}})
    {
        my @tmp = glob("$$self{indir}/$expr");
        for my $file (@tmp)
        {
            my $dir = '.';
            if ( $file=~m{^(.+)/} ) { $dir = $1; $file = $'; }
            my $name = $self->unique_name(\%names,$file);
            push @files,{infile=>"$dir/$file",outfile=>"$$self{outdir}/$name",tmpdir=>"$$self{outdir}/tmp.$name"};
        }
    }
    return @files;
}

sub expand_vars
{
    my ($self,$str,%args) = @_;
    my $ori = $str;
    my $out = '';
    while ( $str=~/{([^}]+)}/ )
    {
        $out .= $`;
        my $key = $1;
        if ( exists($args{$key}) ) { $key = $args{$key}; }
        elsif ( exists($$self{$key}) ) { $key = $$self{$key}; }
        else { $self->throw("No such key [$key] [$ori]"); }
        $out .= $key;
        $str = $';
    }
    $out .= $str;
    return $out;
}

sub run_command
{
    my ($self,$outfile,$cmd) = @_;
    $self->cmd($cmd,verbose=>1);
    $self->cmd("touch $outfile");
}

sub chunk_files
{
    my ($self,@files) = @_;
    for my $file (@files)
    {
        if ( -s $$file{infile} < $$self{split_size} ) 
        { 
            $$file{chunks} = [ { %$file } ];
            next; 
        }
        for my $reg (@{$$self{regions}})
        {
            my $chunk = {};
            $$chunk{infile}  = "$$file{tmpdir}/$reg.in.bam";
            $$chunk{tmpdir}  = "$$file{tmpdir}/$reg.tmp";
            $$chunk{outfile} = "$$file{tmpdir}/$reg.out.bam";
            push @{$$file{chunks}},$chunk;

            $self->spawn('slice_bam',"$$chunk{infile}","$$file{infile}",$reg);
        }
    }
    $self->wait;
}

sub slice_bam
{
    my ($self,$outfile,$infile,$region) = @_;
    $self->cmd("samtools view -b -o $outfile.part $infile $region",verbose=>1);
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub mapdamage
{
    my ($self,$outfile,$infile,$tmpdir) = @_;

    `mkdir -p $tmpdir`;
    $self->cmd("$$self{mapdamage} -i $infile -r $$self{fa_ref} -d $tmpdir/mapdamage --rescale",verbose=>1);

    my @bam = glob("$tmpdir/mapdamage/*.bam");
    if ( !@bam ) { $self->throw("glob failed: $tmpdir/mapdamage/*.bam"); }
    chomp($bam[0]);
    my $bam = $bam[0];

    $self->cmd("samtools index $bam");
    rename("$bam.bai","$outfile.bai") or $self->throw("rename $bam.bai $outfile.bai: $!");
    rename($bam,$outfile) or $self->throw("rename $bam $outfile: $!");
}

sub merge_chunks
{
    my ($self,@files) = @_;
    for my $file (@files)
    {
        if ( scalar @{$$file{chunks}} == 1 ) { next; }
        my @bams = ();
        for my $chunk (@{$$file{chunks}}) { push @bams,$$chunk{outfile}; }
        $self->spawn('merge_bams',$$file{outfile},@bams);
    }
    $self->wait;
}

sub merge_bams
{
    my ($self,$outfile,@bams) = @_;
    $self->cmd("$$self{samtools} cat -o $outfile.part ".join(' ',@bams),verbose=>1);
    $self->cmd("$$self{samtools} index $outfile.part");
    rename("$outfile.part.bai","$outfile.bai") or $self->throw("rename $outfile.part.bai $outfile.bai: $!");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}


