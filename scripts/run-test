#!/usr/bin/env perl
#
#   Author: petr.danecek@sanger
#
#   About: This is a super-simple example of the Runner framework.
#       It creates two groups of files in the home directory named
#       Hello.[123] and Hello.[abc]. The two groups are created
#       in parallel and both groups proceed to the next step 
#       independently of the other.
#
#   Usage:
#       ./run-test +loop 30
#
use strict;
use warnings;

# Create new runner object and run it
my $runner = myRunner->new();
$runner->run();

exit;

#------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

# The user must define at least this method
sub main
{
    my ($self) = @_;

    # In the first step, create two groups of empty files. This is not useful
    # for anything really, just demonstrates the parallelization capabilities.
    # Some of the jobs will take longer to run, still the code will be executed
    # in a synchronized way.

    my $groups = {};
    my $keys   = { alpha=>[qw(a b c)], num=>[qw(1 2 3)] };
    my $sleep  = 1;
    for my $group (keys %$keys)
    {
        for my $suffix (@{$$keys{$group}})
        {
            my $method    = "touch";                        # Create an empty file
            my $done_file = "$ENV{HOME}/Hello.$suffix";
            my %params    = ( sleep=>$sleep );
            $self->spawn($method,$done_file,%params);       # This schedules the jobs

            push @{$$groups{$group}}, $done_file;
        }
        $sleep += 60;   # Let the job from the numeric group run somewhat longer
    }
    my $done = $self->wait($groups);

    # In the second step, create a file for each group, each containing 
    # mtimes of the files from the group. This step demonstrates that all
    # chunks from a group must finish before the group can proceed and
    # that each group can proceed independently of the others.

    for my $group (keys %$done)
    {
        $self->spawn('group',"$ENV{HOME}/Hello.$group",$$done{$group});
    }

    # Wait for all jobs to finish. Once done, the program can continue
    $self->wait;

    print STDERR "Mission accomplished!\n";
    $self->all_done;
}

sub touch
{
    my ($self,$output_file,%args) = @_;

    # Pretend there is some computation lasting a few seconds
    sleep($args{sleep});

    # Then create an empty output file
    `touch $output_file`;
}

sub group
{
    my ($self,$output_file,$files) = @_;
    open(my $fh,'>',"$output_file.part") or $self->throw("$output_file.part: $!");
    for my $file (@$files)
    {
        my $mtime = (stat($file))[9];
        print $fh "$mtime\t$file\n";
    }
    close($fh) or $self->throw("close failed: $output_file.part");
    rename("$output_file.part",$output_file) or $self->throw("rename $output_file.part $output_file: $!");
}

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);
    return $self;
}

