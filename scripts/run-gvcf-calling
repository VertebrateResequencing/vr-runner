#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use Runner::Chunk;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{do_clean} = 1;
    $$self{limits} = { runtime=>24*60 };
    $$self{bcftools} = 'bcftools';
    $$self{merge}    = 'bcftools merge --gvcf';
    $$self{call}     = 'bcftools call -vm';
    $$self{vcfstats} = 'bcftools stats -c both';
    $$self{concat}   = 'bcftools concat';
    $$self{filter}   = 'bcftools filter -m+ -sLowQual -e"QUAL<=10 || IDV<2 || IMF<0.05" -g3 -G10';
    $$self{norm}     = 'bcftools norm -f ref.fa';
    $$self{chunk_size_bp}  = 1_000_000;
	$$self{config_version} = '1394700014';
    $$self{_sampleconf} = q[
            # For sanity checking that your config file is not obsolete. Update the version key in your 
            #  config file to get rid of the warnings.
            #
            version  => '] .$$self{config_version}. q[',

            bcftools => '] .$$self{bcftools}. q[',
            merge    => '] .$$self{merge}. q[',
            call     => '] .$$self{call}. q[',
            vcfstats => '] .$$self{vcfstats}. q[',
            concat   => '] .$$self{concat}. q[',
            filter   => '] .$$self{filter}. q[',
            norm     => '] .$$self{norm}. q[',
 
            bcfs     => 'bcf.list',
            regions  => [ qw(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y) ],

            assumed_sex    => 'F',   # The default sex, see also 'ploidy' definitions
            merge_chroms   => 1,     # Create whole-genome VCF or stop at per-chromosome VCFs?
            chunk_size_bp  => ] .$$self{chunk_size_bp}. q[,
            do_clean       => 1,     # Remove runner's temporary files

            # File or array with ploidy definitions in the format accepted by
            # bcftools. If not defined, the default ploidy is used, unlisted
            # regions are diploid:
            #       X 1 60000 M 1
            #       X 2699521 154931043 M 1
            #       Y 1 59373566 M 1
            #       Y 1 59373566 F 0
            #       MT 1 16569 M 1
            #       MT 1 16569 F 1
            #
            ploidy => undef,

            limits   => { runtime=>24*60 },
    ]."\n";

    $$self{usage} .= 
        "Usage: run-gvcf-calling\n" .
        "Options:\n" .
        "   -b, --bcfs <file>       File with list of VCF/BCF files to merge and call\n" .
        "   -c, --clean             Clean all temporary files (and do nothing else)\n" .
        "   -m, --mrProper          Clean all temporary files, including the population directories and BCFs, leaving only toplevel VCFs (and do nothing else)\n" .
        "   -o, --outdir <dir>      Output directory\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-b' or $arg eq '--bcfs' ) { $$self{bcfs}=shift(@ARGV); next; }
        if ( $arg eq '-c' or $arg eq '--clean' ) { $$self{clean}=1; next; }
        if ( $arg eq '-m' or $arg eq '--mrProper' ) { $$self{mrProper}=1; next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        $self->throw();
    }
    if ( !exists($$self{outdir}) ) { $self->throw("Expected -o option."); }

    # This lengthy code checks if mandatory parameters are present and fills the defaults issuing warnings when doing so.
    if ( exists($$self{_config}) && (!exists($$self{version}) or $$self{version} ne $$self{config_version}) )
    {
        $self->throw("Warning: Your config file may be out of date, the latest version key is \"$$self{config_version}\". Please run with +sampleconf to see what changed.\n");
    }
    if ( !exists($$self{bcfs}) ) { $self->throw("The 'bcfs' config key is not present\n"); }
    if ( !exists($$self{ploidy}) ) 
    { 
        $$self{ploidy} = 
            [
            'X 1 60000 M 1',
            'X 2699521 154931043 M 1',
            'Y 1 59373566 M 1',
            'Y 1 59373566 F 0',
            'MT 1 16569 M 1',
            'MT 1 16569 F 1'
                ];
    }
    if ( $$self{clean} ) 
    { 
        $self->clean($$self{outdir});
        $self->all_done;
    }
    if ( $$self{mrProper} )
    {
        $self->mrProper($$self{outdir});
        $self->all_done;
    }

    if ( $$self{debug} ) { $self->debug_commands(); $self->all_done; }
}

sub main
{
    my ($self) = @_;
    $self->parse_args();

    my $outdir = $$self{outdir};
    if ( $self->is_finished("$outdir/all_done") ) { $self->all_done; }

    $self->cmd(qq[mkdir -p '$outdir']);
    $self->save_config();

    my $chunks = $self->init_chunks();

    $self->set_limits(%{$$self{limits}}) unless !exists($$self{limits});
    my %chrs = ();
    for my $chunk (@$chunks)
    {
        my $chr  = $$chunk{chr};
        my $from = $$chunk{from};
        my $to   = $$chunk{to};
        $chrs{$chr} = 1;
        if ( $self->is_finished("$outdir/$chr.bcf") ) { next; }
        $self->spawn('call_variants',"$outdir/$chr/$chr:$from-$to.bcf",$chunk);
    }
    $self->wait;
    $self->set_limits(runtime=>undef);

    # Concatenate chunks and apply filtering
    my @vcfs = ();
    if ( $$self{merge_chroms} )
    {
        push @vcfs, "$outdir/calls.bcf";
        $self->spawn('merge_chunks',"$outdir/calls.bcf",$chunks);
    }
    else
    {
        for my $chr (keys %chrs)
        {
            push @vcfs, "$outdir/$chr.bcf";
            $self->spawn('merge_chunks',"$outdir/$chr.bcf",$chunks,$chr);
        }
    }
    $self->wait;

    # Run summary stats
    for my $vcf (@vcfs)
    {
        $self->spawn('vcf_stats',"$vcf.filt.vchk",$vcf,'-f PASS');
        $self->spawn('vcf_stats',"$vcf.vchk",$vcf);
    }
    $self->wait;

    if ( $$self{do_clean} ) { $self->clean($outdir); }
    $self->all_done;
}

sub mrProper
{
    my ($self,$outdir) = @_;
    for my $pop (keys %{$$self{pops}})
    {
        $self->cmd("rm -rf $outdir/$pop");
    }
    $self->clean($outdir);
}

sub clean
{
    my ($self,$outdir) = @_;
    $self->SUPER::clean($outdir);

    # my $chunks = $self->init_chunks();
    # for my $chunk (@$chunks)
    # {
    #     my $chr  = $$chunk{chr};
    #     my $from = $$chunk{from};
    #     my $to   = $$chunk{to};
    #     for my $suffix (qw(samples vcf.gz vcf.gz.tbi))
    #     {
    #         my $file = "$outdir/$pop/$chr/$chr:$from-$to.$suffix";
    #         unlink($file) unless !-e $file;
    #     }
    # }
    # for my $chr (@{$$self{chroms}})
    # {
    #     unlink("$outdir/$pop/$chr/concat.list") unless (!-e "$outdir/$pop/$chr/concat.list");
    #     rmdir("$outdir/$pop/$chr") unless ($$self{keep_bcfs});
    # }
}

sub runtime_stats
{
    my ($self,$outfile) = @_;
    $self->cmd("mkdir -p '$outfile.part'");
    $self->cmd("runtime-stats $$self{outdir} -p $outfile.part/graph > $outfile.part/stats.txt");
    open(my $fh,'>',"$outfile.part/info.txt") or $self->throw("$outfile.part/info.txt: $!");
    print $fh $$self{_about};
    close($fh);
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub save_config
{
    my ($self) = @_;
    if ( !exists($$self{_config}) ) { return; }
    my $src = $$self{_config};
    my $dst = "$$self{outdir}/mpileup.conf";
    if ( -e $dst && (stat($src))[9] <= (stat($dst))[9] ) { return; }
    if ( !-d $$self{outdir} ) { $self->cmd("mkdir -p '$$self{outdir}'"); }
    open(my $fh,'>',$dst) or $self->throw("$dst: $!");
    my $about = $$self{_about};
    $about =~ s/\n/\n# /g;
    print $fh "# $about";
    close($fh);
    $self->cmd("cat $src >> $dst");
}

sub init_chunks
{
    my ($self) = @_;

    my ($bcf) = $self->cmd("head -1 $$self{bcfs}");
    chomp($bcf);
    my %args =
    (
        bcftools => $$self{bcftools},
        size_bp  => $$self{chunk_size_bp},
        vcf      => $bcf,
        cache    => "$$self{outdir}/chunks.txt",
    );
    my $chunks = Runner::Chunk::list(%args) or $self->throw("Could not create chunks: $!");
    return $chunks;
}

sub call_variants
{
    my ($self,$outfile,$chunk) = @_;

    my $chr  = $$chunk{chr};
    my $from = $$chunk{from};
    my $to   = $$chunk{to};
    my $bcfs = $$self{bcfs};

    my $cmd = "$$self{merge} -l $bcfs -r $chr:$from-$to -Ou | $$self{call} -Ob -o $outfile.part";
    $self->cmd($cmd);

    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub merge_chunks
{
    my ($self,$outfile,$chunks,$chr) = @_;

    open(my $fh,'>',"$outfile.list") or $self->throw("$outfile.list: $!");
    for my $chunk (@$chunks)
    {
        if ( defined $chr && $$chunk{chr} ne $chr ) { next; }
        print $fh "$$self{outdir}/$$chunk{chr}/$$chunk{chr}:$$chunk{from}-$$chunk{to}.bcf\n";
    }
    close($fh) or $self->throw("close failed: $outfile.list");

    my $cmd = "$$self{concat} -f $outfile.list";
    if ( $$self{norm} )
    {
        $cmd .= " -Ou | $$self{norm}";
    }
    if ( $$self{filter} )
    {
        $cmd .= " -Ou | $$self{filter}"
    }
    $cmd .= " -Ob -o $outfile.part";
    $self->cmd($cmd);

    $self->index_part($outfile);
}

sub index_part
{
    my ($self,$vcf) = @_;
    $self->cmd("$$self{bcftools} index $vcf.part");
    if ( -e "$vcf.part.tbi" )
    {
        rename("$vcf.part.tbi","$vcf.tbi");
        rename("$vcf.part",$vcf);
    }
    else
    {
        rename("$vcf.part.csi","$vcf.csi");
        rename("$vcf.part",$vcf);
    }
}

sub vcf_stats
{
    my ($self,$outfile,$vcf,$args) = @_;
    $self->cmd("$$self{vcfstats} $args $vcf > $outfile.part");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}


