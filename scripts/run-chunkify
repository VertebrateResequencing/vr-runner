#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use Runner::Chunk;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{verbose}  = 1;
    $$self{bcftools} = 'bcftools';
    $$self{do_clean} = 1;
    $$self{limits} = { runtime=>24*60 };
    $$self{config_version} = '1394700014';
    $$self{_sampleconf} = q[

        bcftools    => '] .$$self{bcftools}. q[',

        # This pipeline allows to execute arbitrary commands in parallel
        # on a computing farm and concatenate the outputs. Originally it was
        # developed to parallelize VCF operations but can be used in other
        # contexts as well.
        #
        # 1) Define chunks. Currently there are two possibilities how to do this:
        #   - split by number of sites in a VCF (vcf_sites)
        #   - list genomic regions and chunk sizes (regions, chunk_size, fai) - TODO
        # vcf_sites => 100_000,
        regions     => [ 20, 11],
        chunk_size  => 1_000_000,
        #fai         => '/lustre/scratch105/projects/g1k/ref/main_project/human_g1k_v37.fasta.fai',


        # 2) Specifiy the command to run. By default, it will be used as:
        #   tabix -h $input $region | $cmd | bgzip -c > $output
        # In case that the input key below does not exist or is an array
        # reference instead of a string, the command will be used in the
        # following form:
        #   $cmd | bgzip -c > $output
        # In the latter case, the string {REGION} is expected to be part of the command
        # and will be expanded accordingly. 
        #
        # The list of variables:
        #   {INPUT}
        #   {BNAME}    # {INPUT} with any leading directory components removed
        #   {OUTPUT}
        #   {REGION}
        #   {CHR}
        #   {BEG}
        #   {END}
        #
        # Examples:
        #   cmd => 'wc -l',
        #   cmd => 'vcf-merge -r {REGION} {INPUT}',
        #   cmd => 'bcftools check -r {REGION} A.vcf.gz B.vcf.gz'
        #   cmd => q[bcftools view -r {REGION} {INPUT} -i'POS>={BEG}' -Ou | bcftools call -mv -Ob -o {OUTPUT}],


        # 3) Set optional keys to determine how the outputs should be merged.
        # If not set, the chunks will be concatenated as they are. Otherwise,
        # `bcftools concat` will be used. Todo: allow user-defined command to merge
        # the outputs.
        vcf_concat => 1,

        # Tabix reports the same record in two different chunks when an indel overlaps
        #   region boundary. These duplicate records will be removed when the key 
        #   fix_overlaps is set; the value is interpreted as the 1-based index of the
        #   position column, i.e. 2 for VCF. If set to 0, the overlaps will not be fixed.
        fix_overlaps => 2,


        # The input and output file can be also given on command line (-i,-o)
        # input  => 'input.vcf.gz',
        # output => 'output.vcf.gz',

        do_clean => '] .$$self{do_clean}. q[',

        # For sanity checking that your config file is not obsolete. Update the
        # version key in your config file to get rid of the warnings.
        #
        # What changed since version:
        #   1376393805 .. Switched from "vcf-concat" to "bcftools concat"
        #
        version  => '] .$$self{config_version}. q[',
    ]."\n";

    $$self{usage} .= 
        "Usage: run-chunkify\n" .
        "Options:\n" .
        "   -c, --command <cmd>             The command to run (equal to the \"cmd\" config key)\n" .
        "   -i, --input <file.vcf.gz>       Input file [optional]\n" .
        "   -o, --output <file.vcf.gz>      Output file\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    if ( !exists($$self{input}) ) { $$self{input} = []; }
    if ( !exists($$self{output}) ) { $$self{output} = []; }
    if ( ref($$self{input}) ne 'ARRAY' ) { $$self{input} = [ $$self{input} ]; }
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-c' or $arg eq '--command' ) { $$self{cmd}=shift(@ARGV); next; }
        if ( $arg eq '-o' or $arg eq '--output' ) { push @{$$self{output}}, shift(@ARGV); next; }
        if ( $arg eq '-i' or $arg eq '--input' ) { push @{$$self{input}}, shift(@ARGV); next; }
    }
    if ( !@{$$self{input}} or !@{$$self{output}} ) { $self->throw(); }
    if ( @{$$self{input}} != @{$$self{output}} ) { $self->throw("Expected -i,-o of the same length"); }
    if ( !exists($$self{version}) or $$self{version} ne $$self{config_version} )
    {
        $self->throw("Warning: Your config file may be out of date, the latest version key is \"$$self{config_version}\". Please run with +sampleconf to see what changed.\n");
    }
    if ( !exists($$self{cmd}) ) { $self->throw("Missing the command."); }
    if ( !defined($$self{chunk_size}) ) { $self->throw("Expected \"chunk_size\" key\n"); }
    for my $output (@{$$self{output}})
    {
        my $outdir;
        if ( $output=~/\.vcf.gz$/ ) { $outdir = $`; }
        elsif ( $output=~/\.tab.gz$/ ) { $outdir = $`; }
        elsif ( $output=~/\.bcf$/ ) { $outdir = $`; }
        elsif ( $output=~/\.[^\.]+$/ ) { $outdir = $`; }
        else { $self->throw("todo: $output\n"); }
        push @{$$self{outdir}},$outdir;
    }
}

sub main
{
    my ($self) = @_;
    $self->parse_args();

    my $done = 0;
    for (my $i=0; $i<@{$$self{output}}; $i++)
    {
        if ( $self->is_finished($$self{output}[$i]) ) { $done++; next; }
    }
    if ( $done==@{$$self{output}} )
    {
        for (my $i=0; $i<@{$$self{output}}; $i++)
        {
            $self->clean($$self{outdir}[$i]) unless !$$self{do_clean};
        }
        $self->all_done; 
    }

    my $chunks = $self->init_chunks();
    for my $file (@$chunks)
    {
        for my $chunk (@{$$file{chunks}})
        {
            my $region = "$$chunk{chr}-$$chunk{beg}-$$chunk{end}";
            $self->spawn('run_cmd',"$$file{outdir}/$$chunk{chr}/$region",$$file{vcf},$chunk);
        }
    }
    $self->wait;

    for (my $i=0; $i<@$chunks; $i++)
    {
        my $file = $$chunks[$i];
        $self->spawn('concat',$$self{output}[$i],$$self{outdir}[$i],$$file{chunks});
    }
    $self->wait;

    #   # Run performance stats and clean
    #   $self->spawn('runtime_stats',"$outdir/runtime");
    #   $self->wait;

    for (my $i=0; $i<@{$$self{output}}; $i++)
    {
        $self->clean($$self{outdir}[$i]) unless !$$self{do_clean};
    }
    $self->all_done;
}

sub clean
{
    my ($self,$outdir) = @_;
    $self->SUPER::clean($outdir);
}

sub init_chunks
{
    my ($self) = @_;
    my @files;
    for (my $i=0; $i<@{$$self{input}}; $i++)
    {
        my $outdir = $$self{outdir}[$i];
        push @files, { vcf=>$$self{input}[$i], cache=>"$outdir/chunks.txt", outdir=>$outdir };
    }
    my %args =
    (
        bcftools => $$self{bcftools},
        size_bp  => $$self{chunk_size},
        files    => \@files,
    );
    if ( defined($$self{regions}) ) { $args{regions} = $$self{regions}; }
    my $chunks = $self->Runner::Chunk::list(%args) or $self->throw("Could not create chunks: $!");
    return $chunks;
}

#   sub runtime_stats
#   {
#       my ($self,$outfile) = @_;
#       $self->cmd("mkdir -p $outfile.part");
#       $self->cmd("runtime-stats $$self{outdir} -p $outfile.part/graph > $outfile.part/stats.txt");
#       open(my $fh,'>',"$outfile.part/info.txt") or $self->throw("$outfile.part/info.txt: $!");
#       print $fh $$self{_about};
#       close($fh);
#       rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
#   }

sub index_part
{
    my ($self,$vcf) = @_;
    $self->cmd("bcftools index -f $vcf.part");
    my $suffix = 'csi';
    rename("$vcf.part.$suffix","$vcf.$suffix") or $self->throw("rename $vcf.part.$suffix $vcf.$suffix: $!");
    rename("$vcf.part",$vcf) or $self->throw("rename $vcf.part $vcf: $!");
}

sub parse_region
{
    my ($self,$region) = @_;
    if ( $region=~/^([^:]+):(\d+)-(\d+)$/ ) { return ($1,$2,$3); }
    elsif ( $region=~/^([^:]+):(\d+)$/ ) { return ($1,$2,undef); }
    elsif ( $region=~/^([^:]+)$/ ) { return ($1,undef,undef); }
    else { $self->throw("Could not parse the region: $region\n"); }
}

sub ith_column
{
    # $icol is 1-based
    my ($self,$line,$icol) = @_;
    if ( $icol<=0 ) { $self->throw("Expected \$icol > 0, got $icol\n"); }
    my $s = 0;
    my $e = -1;
    my $i = 0;
    while ($i<$icol)
    {
        $s = $e + 1;
        $e = index($line,"\t",$s);
        $i++;
        if ( $e==-1 ) { last; }
    }
    if ( $e==-1 ) 
    { 
        if ( $i<$icol ) { $self->throw("Too few columns on the line, asked $icol: $line"); }
        $e = length($line) - 1; 
    }
    return substr($line,$s,$e-$s);
}

sub base_name
{
    my ($name) = @_;
    if ( $name=~m{^.+/([^/]+)$} ) { $name = $1; }
    return $name;
}

sub run_cmd
{
    my ($self,$outfile,$input,$chunk) = @_;

    my $region = "$$chunk{chr}:$$chunk{beg}-$$chunk{end}";
    my $cmd = $$self{cmd};
    $cmd =~ s/{REGION}/$region/g;

    if ( defined $input )
    {
        if ( ref($input) eq 'ARRAY' )   # todo: this should never happen in the new code
        {
            my $inp   = join(' ',@$input);
            $cmd =~ s/{INPUT}/$inp/g;
        }
        elsif ( $cmd =~ /{INPUT}/ )
        {
            $cmd =~ s/{INPUT}/$input/g;
        }
        else
        {
            $cmd = "tabix -h $input $region | $cmd";
        }
        if ( $cmd =~ /{BNAME}/ && ref($input) ne 'ARRAY' )
        {
            my $bname = base_name($input);
            $cmd =~ s/{BNAME}/$bname/g;
        }
    }
    if ( $cmd =~ /{CHR}/ ) { $cmd =~ s/{CHR}/$$chunk{chr}/; }
    if ( $cmd =~ /{BEG}/ ) { $cmd =~ s/{BEG}/$$chunk{beg}/; }
    if ( $cmd =~ /{END}/ ) { $cmd =~ s/{END}/$$chunk{end}/; }
    if ( $cmd =~ /{OUTPUT}/ ) { $cmd =~ s/{OUTPUT}/$outfile.part/; }
    else { $cmd .= " | bgzip -c > $outfile.part"; }

    $self->cmd($cmd);

    if ( $$self{fix_overlaps} )
    {
        my ($chr,$from,$to) = $self->parse_region($region);
        open(my $in,"zcat $outfile.part |") or $self->throw("zcat $outfile.part: $!");
        open(my $out,"| bgzip -c > $outfile.part2") or $self->throw("bgzip -c > $outfile.part2: $!");
        while (my $line=<$in>)
        {
            if ( substr($line,0,1) ne '#' ) 
            {
                my $pos = $self->ith_column($line, $$self{fix_overlaps});
                if ( $pos < $from ) { next; }
                if ( defined $to && $pos > $to ) { next; }
            }
            print $out $line;
        }
        close($out) or $self->throw("close bgzip -c > $outfile.part2");
        close($in) or $self->throw("close zcat $outfile.part");
        rename("$outfile.part2","$outfile.part") or $self->throw("rename $outfile.part2 $outfile.part: $!");
    }
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub concat
{
    my ($self,$outfile,$outdir,$chunks) = @_;
    if ( $$self{vcf_concat} )
    {
        $self->vcf_concat($outfile,$outdir,$chunks);
        return;
    }

    # Generic concat
    open(my $fh,"| bgzip -c > $outfile.part") or $self->throw("bgzip -c > $outfile.part: $!");
    for my $chunk (@$chunks)
    {
        my $region = "$$chunk{chr}-$$chunk{beg}-$$chunk{end}";
        open(my $in,"gunzip -c $outdir/$$chunk{chr}/$region |") or $self->throw("gunzip -c $outdir/$$chunk{chr}/$region: $!");
        while (my $line=<$in>) { print $fh $line; }
        close($in) or $self->throw("close gunzip -c $outdir/$$chunk{chr}/$region");
    }
    close($fh) or $self->throw("close bgzip -c > $outfile.part");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub vcf_concat
{
    my ($self,$outfile,$outdir,$chunks) = @_;
    my $list = "$outdir/concat.list";
    open(my $fh,'>',"$list") or $self->throw("$list: $!");
    for my $chunk (@$chunks)
    {
        my $region = "$$chunk{chr}-$$chunk{beg}-$$chunk{end}";
        print $fh "$outdir/$$chunk{chr}/$region\n";
    }
    close($fh) or $self->throw("close $list");

    $self->cmd("$$self{bcftools} concat -f $list -Ob -o $outfile.part");
    $self->index_part($outfile);
}



