#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;
use Runner::Chunk;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{verbose} = 1;
    $$self{limits}  = { memory=>2_000, runtime=>3*24*60 };
    $$self{max_samples} = 100;
    $$self{max_size_Mb} = 10; 
    $$self{eagle}    = 'eagle';
    $$self{bcftools} = 'bcftools';
    $$self{vcf_ref}  = 'resources/refs/imputation/1000g-phase3/vcf/1000GP_Phase3_chr{CHROM}.bcf';
    $$self{gen_map}  = 'resources/refs/imputation/genetic-map/genetic_map_chr{CHROM}_combined_b37.txt';
    $$self{regions}  = [1..22];
    $$self{fmt}      = 'bcf';
    $$self{merge_samples} = 1;
    $$self{concat_chrs}   = 1;

    $$self{config_version} = '1427807557';
    $$self{_sampleconf} = q[

        # For sanity checking that your config file is not obsolete. Update
        # the version key in your config file to get rid of the warnings.
        version  => '] .$$self{config_version}. q[',

        eagle    => '] .$$self{eagle}.    q[',
        bcftools => '] .$$self{bcftools}. q[',
        vcf_ref  => '] .$$self{vcf_ref}.  q[',
        gen_map  => '] .$$self{gen_map}.  q[',

        regions  => [1..22],
        fmt      => '] .$$self{fmt}. q[',       # output fmt: bcf or vcf

        # merging the imputation results will run in parallel over chunks of this size (Mbp)
        max_size_Mb => ] .$$self{max_size_Mb}. q[,

        # max samples for pbwt imputation. Input VCF will be split into subsets
        # containing at most this many samples
        max_samples => ] .$$self{max_samples}. q[,

        # if set to 0, files split by samples will not be merged back
        merge_samples => 1,

        # if set to 0, files split by chromosome will not be concatenated
        concat_chrs   => 1,

        limits => { memory=>2_500, runtime=>3*24*60 },

    ]."\n";

    $$self{usage} .= 
        "About: Run eagle phasing on a list of VCF/BCF files\n" .
        "Usage: run-eagle\n" .
        "Options:\n" .
        "   -f, --file <file>           VCF/BCF file to impute\n" .
        "   -l, --list <file>           File with VCF/BCF file names\n" .
        "   -o, --outdir <dir>          Output directory\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-f' or $arg eq '--file' ) { $$self{file}=shift(@ARGV); next; }
        if ( $arg eq '-l' or $arg eq '--list' ) { $$self{vcfs}=shift(@ARGV); next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        $self->throw();
    }
    if ( !defined($$self{outdir}) ) { $self->throw("Expected the -o option."); }
    if ( !defined($$self{file}) && !defined($$self{vcfs}) ) { $self->throw("Expected one of the -f or -l options."); }
    if ( defined($$self{file}) ) { push @{$$self{vcfs}},$$self{file}; }
    my @chrs = @{$$self{regions}};
    $$self{regions} = {};
    for my $chr (@chrs) { $$self{regions}{$chr} = 1; }
}

sub main
{
    my ($self) = @_;
    $self->parse_args();
    $self->save_config("eagle.conf");

    my $outdir = $$self{outdir};
    if ( $self->is_finished("$outdir/all_done") ) { $self->all_done; }
    `mkdir -p $outdir`;


    # split by sample and by chromosome
    my $samples = $self->Runner::Chunk::split_samples(
                nsmpl => $$self{max_samples},
                vcf   => \@{$$self{vcfs}},
                cache => "$outdir/chunks.sample.txt",
                dir   => $outdir,
                write => { vcf=>1, list=>1 },
            );
    my $chrs = Runner::Chunk::list_chrs(
                vcf     => \@{$$self{vcfs}},
                cache   => "$outdir/chunks.chr.txt",
                regions => $$self{regions},
            );

    # run eagle
    $self->set_limits(%{$$self{limits}}) unless !exists($$self{limits});
    my %merge = ();
    for my $chunk (@$samples)
    {
        for my $chr (keys %$chrs)
        {
            my $src_file = $$chunk{src_file};
            if ( !exists($$chrs{$chr}{$src_file}) ) { next; }

            $self->spawn('run_eagle',"$$chunk{dst_dir}/$$chunk{dst_file}.$chr.bcf",
                    samples => "$$chunk{dst_dir}/$$chunk{dst_file}.samples",
                    vcf     => "$$chunk{dst_dir}/$$chunk{dst_file}.bcf",
                    region  => $chr,
                );
            push @{$merge{$src_file}{$chr}}, "$$chunk{dst_dir}/$$chunk{dst_file}.$chr.bcf";
        }
    }
    $self->wait;
    $self->set_limits(memory=>undef,runtime=>undef);


    # merge samples back, but do this in parallel on smaller chunks, as merging is slow with many samples.
    # The pipeline also allows to leave the per-sample files unmerged.
    my @dst_files = ();
    if ( $$self{merge_samples} )
    {
        for my $src_file (keys %merge)
        {
            for my $chr (keys %{$merge{$src_file}})
            {
                push @dst_files, { src_file=>$src_file, region=>$chr, vcf=>$merge{$src_file}{$chr}, fmt=>$$self{fmt} };
            }
        }
        my $merged = $self->Runner::Chunk::merge_samples(
                    files   => \@dst_files,
                    dir     => "$outdir/merged",
                    size_bp => $$self{max_size_Mb}*1e6,
                    bcftools => $$self{bcftools}
                );
        @dst_files = @$merged;

        if ( $$self{concat_chrs} )
        {
            my %tasks = ();
            for my $file (@dst_files)
            {
                my $src = $$file{src_file};
                my $fmt = $$self{fmt} eq 'vcf' ? 'vcf.gz' : 'bcf';
                push @{$tasks{$src}{list}}, "$$file{dst_dir}/$$file{dst_file}.$fmt";
            }
            my @concat = ();
            for my $src (keys %tasks) 
            { 
                push @concat, { list=>$tasks{$src}{list}, src_file=>$src, region=>'all', fmt=>$$self{fmt} }; 
            }
            my $concat = $self->Runner::Chunk::concat(
                        files => \@concat,
                        dir   => "$outdir/concat",
                        bcftools => $$self{bcftools}
                    );
            @dst_files = @$concat;
        }
    }
    else
    {
        for my $src_file (keys %merge)
        {
            for my $chr (keys %{$merge{$src_file}})
            {
                for my $file (@{$merge{$src_file}{$chr}})
                {
                    my @items = split(m{/},$file);
                    my $file = pop(@items);
                    my $dir  = join('/',@items);
                    $file =~ s/\.[^.]+$//;
                    push @dst_files, { src_file=>$src_file, region=>$chr, dst_dir=>$dir, dst_file=>$file };
                }
            }
        }
    }

    if ( !$self->is_finished("$outdir/mapping.txt") )
    {
        open(my $fh,'>',"$outdir/mapping.txt.part") or $self->throw("$outdir/mapping.txt.part");
        for my $file (@dst_files)
        {
            my $fmt = $$self{fmt} eq 'vcf' ? 'vcf.gz' : 'bcf';
            print $fh "$$file{src_file}\t$$file{region}\t$$file{dst_dir}/$$file{dst_file}.$fmt\n";
        }
        close($fh) or $self->throw("close failed: $outdir/mapping.txt.part");
        rename("$outdir/mapping.txt.part","$outdir/mapping.txt") or $self->throw("rename $outdir/mapping.txt.part $outdir/mapping.txt: $!");
    }

   # $self->clean();
    $self->all_done;
}

sub clean
{
    my ($self) = @_;
    $self->SUPER::clean($$self{outdir});
}

sub save_config
{
    my ($self,$name) = @_;
    my $src = $$self{_config} ? $$self{_config} : undef;
    my $dst = "$$self{outdir}/$name";
    if ( -e $dst && (!defined($src) or (stat($src))[9] <= (stat($dst))[9]) ) { return; }
    if ( !-d $$self{outdir} ) { $self->cmd("mkdir -p $$self{outdir}"); }
    open(my $fh,'>',$dst) or $self->throw("$dst: $!");
    my $about = $$self{_about};
    $about =~ s/\n/\n# /g;
    print $fh "# $about";
    close($fh);
    if ( defined $src ) { $self->cmd("cat $src >> $dst"); }
}
sub expand_chrom
{
    my ($self,$path,$region) = @_;
    if ( !defined $region ) { return $path; }
    $region =~ s/:.*$//;
    $path =~ s/{CHROM}/$region/g;
    return $path;
}
sub index_part
{
    my ($self,$vcf) = @_;
    my $suffix = 'csi';
    if ( $vcf =~ /\.bcf$/i )
    {
        $self->cmd("bcftools index -f $vcf.part");
    }
    else
    {
        $self->cmd("bcftools index -ft $vcf.part");
        $suffix = 'tbi';
    }
    rename("$vcf.part.$suffix","$vcf.$suffix") or $self->throw("rename $vcf.part.$suffix $vcf.$suffix: $!");
    rename("$vcf.part",$vcf) or $self->throw("rename $vcf.part $vcf: $!");
}

sub run_eagle
{
    my ($self,$outfile,%args) = @_;

    my $vcf_ref = $self->expand_chrom($$self{vcf_ref},$args{region});
    if ( ! -e $vcf_ref ) { $self->throw("No such file: $vcf_ref .. [$$self{vcf_ref},$args{region}]\n"); }

    my $gen_map = $self->expand_chrom($$self{gen_map},$args{region});
    if ( ! -e $gen_map ) { $self->throw("No such file: $gen_map .. [$$self{gen_map},$args{region}]\n"); }

    my $cmd = "$$self{eagle} --chrom $args{region} --vcfRef $vcf_ref --vcfTarget $args{vcf} --geneticMapFile $gen_map --vcfOutFormat b --outPrefix $outfile.part > $outfile.log";
    $self->cmd($cmd);

    $self->cmd("bcftools index -f $outfile.part.bcf");
    rename("$outfile.part.bcf.csi","$outfile.csi") or $self->throw("rename $outfile.part.bcf.csi $outfile.csi: $!");
    rename("$outfile.part.bcf",$outfile) or $self->throw("rename $outfile.part.bcf $outfile: $!");
}

