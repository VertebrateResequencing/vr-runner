#!/usr/bin/env perl
#
# Author: shane.mccarthy@sanger
# Based on POLISHINGkit by @DDDolle https://github.com/VertebrateResequencing/POLISHINGkit
#

use strict;
use warnings;
use Carp;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

use POSIX;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{do_clean} = 1;
    $$self{verbose} = 1;
    $$self{limits} = { memory => 36000, runtime=>24*60 };
    $$self{pbenv} = 'unset PYTHONPATH && unset PYTHONUSERBASE && export PATH=/software/vertres/installs/miniconda3/bin:${PATH} && export SMRT_CHEMISTRY_BUNDLE_DIR=/software/vertres/installs/pacbio && source activate pb-assembly-0.0.8 && ';
    $$self{gcpp} = "gcpp";
    $$self{pbmm2} = "pbmm2";
    $$self{minimap2} = "minimap2";
    $$self{pbindex} = "pbindex";
    $$self{pbbamify} = "pbbamify";
    $$self{samtools} = "samtools";
    $$self{bcftools} = "bcftools";
    $$self{bgzip} = "bgzip";
    $$self{minimap2_options} = '-t 30';
    $$self{gcpp_options} = '-j 12';
    $$self{scaffold_grouping_size} = 200_000;
    $$self{config_version} = '1500540704';
    $$self{debug_chunks} = 0;
    $$self{_sampleconf} = q[
# For sanity checking that your config file is not obsolete.
# Update the version key in your config file to remove warnings.
#
#   1500540704 .. Initial pipeline
#
version  => '] . $$self{config_version} . q[',

# file containing the input *.subreads.bam or *.bax.h5 files - one file per line
fofn => '/path/to/list/of/input/files',

# directory for output files - will be created if it doesn't exist
outdir => '/path/to/output/directory',

# path to the assembly fasta polished
assembly => '/path/to/assembly/fasta',

# smaller scaffolds can be grouped together such that
# their combined size is never more than scaffold_grouping_size
scaffold_grouping_size => '] . $$self{scaffold_grouping_size} . q[',

# samtools version that supports the 'merge -R' option
samtools  => '] . $$self{samtools} . q[',

# path to gzip or pigz if you have it installed
bgzip  => '] . $$self{bgzip} . q[',
] . "\n";

    $$self{usage} .=
        "Usage: run-arrow\n" .
        "Options:\n" .
        "   -a, --assembly      path to assembly fasta\n" .
        "   -f, --fofn          fofn listing *subreads.bam or *.bax.h5 files\n" .
        "   -o, --outdir        path to output directory\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-a' or $arg eq '--assembly' ) { $$self{assembly}=shift(@ARGV); next; }
        if ( $arg eq '-f' or $arg eq '--fofn' ) { $$self{fofn}=shift(@ARGV); next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        $self->throw();
    }
    if ( !exists($$self{assembly}) ) { $self->throw("Expected --assembly option."); }
    if ( !exists($$self{outdir}) ) { $self->throw("Expected --outdir option."); }
    if ( !exists($$self{fofn}) ) { $self->throw("Expected --fofn option."); }
}

sub cmd
{
    my ($self,$cmd,%arg) = @_;
    $self->SUPER::cmd(qq[$$self{pbenv}$cmd],%arg);
}

sub main
{
    my ($self) = @_;
    $self->parse_args();
    $self->save_config();

    # uncompress or make copy of the assembly fasta
    my ($basename) = $$self{assembly} =~ m/([^\/]+)(\.gz)?$/;
    $basename =~ s/\.fa(sta)?(\.gz)?$//;
    $self->spawn('prepare_fasta',"$$self{outdir}/assembly/$basename.fasta",$$self{assembly});
    $self->wait;
    $$self{assembly} = "$$self{outdir}/assembly/$basename.fasta";

    # index the assembly fasta
    $self->set_limits(%{$$self{limits}}, cpus => 4);
    my $mmidx = $$self{assembly};
    $mmidx =~ s/fasta$/mmi/;
    $self->spawn('mmidx',$mmidx);
    $self->wait;

    # align reads to the assembly using minimap2
    my $inputs = $self->read_list("$$self{fofn}");
    my $cpus = $self->num_cpus($$self{minimap2_options});
    $self->set_limits(%{$$self{limits}}, %{$$self{minimap2_limits}}, $cpus ? (cpus => $cpus) : ());
    my @aligned_bams;
    foreach my $input (@$inputs)
    {
        my ($base) = $input =~ m/([^\/]+)\.(bam|bax.h5)$/;
        $self->spawn('minimap2',"$$self{outdir}/aligned/${base}.aligned.sorted.bam",$input);
        push @aligned_bams, "$$self{outdir}/aligned/${base}.aligned.sorted.bam";
    }
    $self->wait;

    my $aligned_bams_fofn = "$$self{outdir}/aligned/aligned_bams.fofn";
    $self->write_list($aligned_bams_fofn,\@aligned_bams) unless (-s $aligned_bams_fofn);

    # create one BAM file for each scaffold or group of smaller scaffolds
    my $regions = $self->read_fai("$$self{assembly}.fai");
    $self->set_limits(memory => 5000, time => 60, cpus => 1);
    foreach my $id (sort {$a <=> $b} keys %$regions)
    {
        $self->spawn('merge',"$$self{outdir}/merge/$id.bam",$$regions{$id},$aligned_bams_fofn);
    }
    $self->wait;

    # polish each scaffold or group of smaller scaffolds
    $cpus = $self->num_cpus($$self{gcpp_options});
    $self->set_limits(%{$$self{limits}}, %{$$self{gcpp_limits}}, $cpus ? (cpus => $cpus) : ());
    foreach my $id (sort {$a <=> $b} keys %$regions)
    {
        $self->spawn('polish',"$$self{outdir}/polish/$id.fasta.gz",$$regions{$id},"$$self{outdir}/merge/$id.bam");
    }
    $self->wait;

    $self->set_limits(memory => 12000, runtime => 20, cpus => undef);
    my @ids = sort { $a <=> $b } keys %$regions;
    # Combine polished FASTA files
    my $fastas = [ map { "$$self{outdir}/polish/$_.fasta.gz" } @ids ];
    $self->spawn('combine_fasta',"$$self{outdir}/polished.fasta.gz",$fastas);
    # Combine polished FASTQ files
    my $fastqs = [ map { "$$self{outdir}/polish/$_.fastq.gz" } @ids ];
    $self->spawn('combine_fastq',"$$self{outdir}/polished.fastq.gz",$fastqs);
    # Combine the VCF files describing the differences between the polished & unpolished assembly
    my $vcfs = [ map { "$$self{outdir}/polish/$_.vcf.gz" } @ids ];
    $self->spawn('combine_vcf',"$$self{outdir}/polished.vcf.gz",$vcfs);
    $self->wait;

    $self->all_done;
}

sub prepare_fasta
{
    my ($self,$outfile,$fasta) = @_;
    if ($fasta =~ /\.gz/)
    {
        $self->cmd(qq[$$self{bgzip} -dc $fasta | sed 's/[:|]/_/g' > $outfile.part]);
    }
    else
    {
        $self->cmd(qq[sed 's/[:|]/_/g' $fasta > $outfile.part]);
    }
    rename("$outfile.part", $outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub mmidx
{
    my ($self,$outfile) = @_;
    $self->cmd(qq[$$self{samtools} faidx $$self{assembly}]);
    my $size = ceil( (-s $$self{assembly}) / 1e9 );
    my $idx_size = $size > 4 ? " -I${size}G" : '';
    $self->cmd(qq[$$self{minimap2} -axmap-pb$idx_size -d $outfile.part $$self{assembly}]);
    rename("$outfile.part", $outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub minimap2
{
    my ($self,$outfile,$bam) = @_;
    my $cpus = $self->num_cpus($$self{minimap2_options});
    my $mmidx = $$self{assembly};
    $mmidx =~ s/fasta$/mmi/;
    unless (-s "$bam.pbi")
    {
        $self->cmd(qq[$$self{pbindex} $bam]);
    }
    $self->cmd(qq[$$self{samtools} fastq -n $bam | $$self{minimap2} -axmap-pb -t$cpus --secondary=no $mmidx - | $$self{samtools} view -\@4 -F0x04 -bT $$self{assembly} -o $outfile.mm2.bam]);
    $self->cmd(qq[$$self{pbbamify} --input $outfile.mm2.bam --output $outfile.tmp.bam $$self{assembly} $bam]);
    $cpus = $cpus > 6 ? 6 : $cpus;
    my $sort_options = "-T $outfile.sort_tmp -OBAM";
    my $threads = $cpus ? " -\@$cpus" : "";
    $self->SUPER::cmd(qq[rm ${outfile}.sort_tmp.*.bam]) if (glob(qq[${outfile}.sort_tmp.*.bam])); # clean up failed samtools sort tmp files if necessary
    $self->cmd(qq[$$self{samtools} sort$threads $sort_options -o $outfile.part $outfile.tmp.bam]);
    $self->cmd(qq[$$self{samtools} index -c$threads $outfile.part $outfile.bai]);
    $self->SUPER::cmd(qq[rm $outfile.tmp.bam $outfile.mm2.bam]);
    rename("$outfile.part", $outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

# tried to switch to pbmm2 for mapping, but can't set tmp directory, which can
# then get full so need to wait for that issue to be fixed
sub pbmm2
{
    my ($self,$outfile,$bam) = @_;
    my $cpus = $self->num_cpus($$self{minimap2_options});
    my $mmidx = $$self{assembly};
    $mmidx =~ s/fasta$/mmi/;
    $self->cmd(qq[$$self{pbmm2} align -j $cpus $bam $mmidx $outfile.tmp.bam]);
    $cpus = $cpus > 6 ? 6 : $cpus;
    $self->SUPER::cmd(qq[rm ${outfile}_sort_tmp.*.bam]) if (glob(qq[${outfile}_sort_tmp.*.bam])); # clean up failed samtools sort tmp files if necessary
    $self->cmd(qq[$$self{samtools} sort -\@$cpus -T ${outfile}_sort_tmp -OBAM -o $outfile.part $outfile.tmp.bam]);
    $self->SUPER::cmd(qq[rm $outfile.tmp.bam]);
    $self->cmd(qq[$$self{samtools} index -c -\@$cpus $outfile.part $outfile.bai]);
    rename("$outfile.part", $outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub read_fai
{
    my ($self,$fai) = @_;

    # Determine the scaffolds and their lengths, grouping small scaffolds together
    open(my $fh,'<',$fai) or $self->throw("could not open $fai: $!");
    my %regions;
    my $id = 0;
    my $group_length = 0;
    while (my $line=<$fh>)
    {
        my ($contig,$end,undef) = split(/\t/,$line);
        if (%regions && $$self{scaffold_grouping_size} && $group_length+$end > $$self{scaffold_grouping_size})
        {
            $id++;
            $group_length = 0;
        }
        $group_length+=$end;
        push @{$regions{$id}}, { contig=>$contig, beg=>0, end=>$end };
    }
    close($fh) or $self->throw("could not close $fai: $!");

    unless ( keys %regions ) { $self->throw("no sequences read from $fai!?"); }
    return \%regions;
}

sub merge
{
    my ($self,$outfile,$regs,$fofn) = @_;
    if (scalar @$regs == 1)
    {
        my $reg = shift @$regs;
        $self->cmd(qq[$$self{samtools} merge -cpf -R "$$reg{contig}" -b $fofn $outfile.part.bam]);
    }
    else
    {
        my @region_bams;
        foreach my $reg (@$regs)
        {
            my $ctg = $$reg{contig};
            $ctg =~ s/[:|]/_/g;
            $self->cmd(qq[$$self{samtools} merge -cpf -R "$$reg{contig}" -b $fofn $outfile.$ctg.bam]);
            push @region_bams, "$outfile.$ctg.bam";
        }
        $self->write_list("$outfile.list",\@region_bams);
        $self->cmd(qq[$$self{samtools} cat -b $outfile.list -o $outfile.part.bam]);
        $self->SUPER::cmd(qq[cat $outfile.list | xargs rm]);
        $self->SUPER::cmd(qq[rm $outfile.list]);
    }
    $self->cmd(qq[$$self{samtools} quickcheck -vvv $outfile.part.bam]);
    $self->cmd(qq[$$self{samtools} index -c $outfile.part.bam $outfile.part.bam.bai]); # trick gcpp into reading a CSI file by naming as BAI
    # rename("$outfile.part.bam.pbi", "$outfile.pbi") or $self->throw("rename $outfile.part.bam.pbi $outfile.pbi: $!");
    rename("$outfile.part.bam.bai", "$outfile.bai") or $self->throw("rename $outfile.part.bam.bai $outfile.bai: $!");
    rename("$outfile.part.bam", $outfile) or $self->throw("rename $outfile.part.bam $outfile: $!");
}

sub polish
{
    my ($self,$outfile,$regs,$bam) = @_;
    my $prefix = $outfile;
    $prefix =~ s/\.fasta.gz//;
    my $reg = shift @$regs;
    my $win = qq["$$reg{contig}:$$reg{beg}-$$reg{end}"];
    foreach $reg (@$regs)
    {
        $win .= qq[,"$$reg{contig}:$$reg{beg}-$$reg{end}"];
    }
    $self->cmd(qq[$$self{gcpp} $$self{gcpp_options} -w $win -r $$self{assembly} $bam -o $prefix.fasta,$prefix.fastq,$prefix.vcf]);
    my $cpus = $self->num_cpus($$self{gcpp_options});
    $self->cmd(qq[cat $prefix.vcf | $$self{bgzip} -c\@$cpus > $prefix.vcf.gz]);
    $self->cmd(qq[cat $prefix.fastq | $$self{bgzip} -c\@$cpus > $prefix.fastq.gz]);
    $self->cmd(qq[cat $prefix.fasta | $$self{bgzip} -c\@$cpus > $outfile.part]);
    $self->cmd(qq[rm $prefix.vcf $prefix.fasta $prefix.fastq]);
    rename("$outfile.part", $outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub combine_fasta
{
    my ($self,$outfile,$fastas) = @_;
    $self->write_list(qq[$outfile.fofn],$fastas);
    $self->cmd(qq[( for fa in `cat $outfile.fofn`; do $$self{bgzip} -dc \$fa; done ) | sed 's/|arrow/_arrow/' | $$self{bgzip} -c > $outfile.part]);
    $self->SUPER::cmd(qq[rm $outfile.fofn]);
    $self->cmd(qq[asmstats $outfile.part > $outfile.stats]);
    rename("$outfile.part", $outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub combine_fastq
{
    my ($self,$outfile,$fastqs) = @_;
    $self->write_list(qq[$outfile.fofn],$fastqs);
    $self->cmd(qq[( for fq in `cat $outfile.fofn`; do $$self{bgzip} -dc \$fq; done ) | sed 's/|arrow/_arrow/' | $$self{bgzip} -c > $outfile.part]);
    $self->SUPER::cmd(qq[rm $outfile.fofn]);
    rename("$outfile.part", $outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub combine_vcf
{
    my ($self,$outfile,$vcfs) = @_;
    $self->write_list(qq[$outfile.fofn],$vcfs);
    $self->cmd(qq[$$self{bcftools} concat -f $outfile.fofn | sed 's/|arrow/_arrow/' | $$self{bgzip} -c > $outfile.part]);
    $self->SUPER::cmd(qq[rm $outfile.fofn]);
    $self->index_part($outfile);
}

sub index_part
{
    my ($self,$vcf,$threads) = @_;
    my $cmd = "$$self{bcftools} index -f";
    $cmd .= " --threads $threads" if (defined $threads && $threads);
    $self->cmd("$cmd $vcf.part");
    my $suffix = 'csi';
    rename("$vcf.part.$suffix","$vcf.$suffix") or $self->throw("rename $vcf.part.$suffix $vcf.$suffix: $!");
    rename("$vcf.part",$vcf) or $self->throw("rename $vcf.part $vcf: $!");
}

sub num_cpus
{
    my ($self,$opts) = @_;
    my (undef,$cpus) = $opts =~ m/-(j|t|nproc)\s*(\d+)/;
    return $cpus ? $cpus : '';
}

sub read_list
{
    my ($self, $file) = @_;
    my @list;
    open(my $fh, "<$file") or $self->throw("Could not open file $file: $!");
    while (<$fh>)
    {
        chomp;
        next if (/^#/);
        push(@list, $_);
    }
    close($fh) or $self->throw("Could not close $file: $!");
    return \@list;
}

sub write_list
{
    my ($self, $file, $list) = @_;
    open(my $fh, ">$file") or $self->throw("Could not open file $file: $!");
    foreach my $item (@$list)
    {
        print $fh "$item\n";
    }
    close($fh) or $self->throw("Could not close $file: $!");
}

sub save_config
{
    my ($self) = @_;
    my $src = exists $$self{_config} ? $$self{_config} : '';
    my $dst = "$$self{outdir}/arrow.conf";
    if ( -e $dst && $src && (stat($src))[9] <= (stat($dst))[9] ) { return; }
    # if ( -e $dst && !$src) { return; }
    if ( !-d $$self{outdir} ) { $self->SUPER::cmd("mkdir -p $$self{outdir}"); }
    open(my $fh,'>',$dst) or $self->throw("$dst: $!");
    my $about = $$self{_about};
    $about =~ s/\n/\n# /g;
    print $fh "# $about";
    close($fh);
    $self->SUPER::cmd("cat $src >> $dst") if $src;
}
